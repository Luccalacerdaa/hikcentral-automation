import axios from 'axios';
import { logger } from '../utils/logger';

export interface HikCentralAutomationRequest {
  visitor_id: string;
  visitor_data: {
    name: string;
    cpf: string;
    phone: string;
    email?: string;
    photo_url?: string;
  };
}

export interface HikCentralAutomationResponse {
  success: boolean;
  message: string;
  hikcentral_id?: string;
  error?: string;
  step?: string;
  timestamp: string;
}

export class HikvisionAutomationService {
  private automationApiUrl: string;
  private maxRetries: number = 3;
  private retryDelay: number = 5000; // 5 segundos

  constructor() {
    // URL da API local da m√°quina da portaria
    this.automationApiUrl = process.env.HIKCENTRAL_AUTOMATION_API_URL || 'http://localhost:5000';
  }

  /**
   * Executa a automa√ß√£o do HikCentral para um visitante
   */
  async executeAutomation(request: HikCentralAutomationRequest): Promise<HikCentralAutomationResponse> {
    try {
      logger.info(`üöÄ Iniciando automa√ß√£o HikCentral para visitante ${request.visitor_id}`);

      // Tentar executar a automa√ß√£o com retry
      for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
        try {
          const response = await this.callAutomationAPI(request);
          
          if (response.success) {
            logger.info(`‚úÖ Automa√ß√£o HikCentral conclu√≠da com sucesso para visitante ${request.visitor_id}`);
            return response;
          } else {
            logger.warn(`‚ö†Ô∏è Tentativa ${attempt} falhou: ${response.error}`);
            
            if (attempt === this.maxRetries) {
              return response;
            }
            
            // Aguardar antes da pr√≥xima tentativa
            await this.delay(this.retryDelay * attempt);
          }
        } catch (error) {
          logger.error(`‚ùå Erro na tentativa ${attempt}: ${error}`);
          
          if (attempt === this.maxRetries) {
            throw error;
          }
          
          // Aguardar antes da pr√≥xima tentativa
          await this.delay(this.retryDelay * attempt);
        }
      }

      throw new Error('Todas as tentativas de automa√ß√£o falharam');
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
      logger.error(`‚ùå Falha na automa√ß√£o HikCentral: ${errorMessage}`);
      
      return {
        success: false,
        message: 'Falha na automa√ß√£o do HikCentral',
        error: errorMessage,
        step: 'automation_execution',
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Chama a API local de automa√ß√£o
   */
  private async callAutomationAPI(request: HikCentralAutomationRequest): Promise<HikCentralAutomationResponse> {
    try {
      const response = await axios.post(
        `${this.automationApiUrl}/api/hikcentral/automation`,
        request,
        {
          timeout: 300000, // 5 minutos de timeout
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${process.env.HIKCENTRAL_AUTOMATION_API_KEY || 'default-key'}`
          }
        }
      );

      return response.data;
    } catch (error) {
      if (axios.isAxiosError(error)) {
        if (error.code === 'ECONNREFUSED') {
          throw new Error('API de automa√ß√£o n√£o est√° dispon√≠vel. Verifique se o servi√ßo est√° rodando na m√°quina da portaria.');
        }
        if (error.response) {
          throw new Error(`Erro da API de automa√ß√£o: ${error.response.status} - ${error.response.data?.message || 'Erro desconhecido'}`);
        }
        if (error.code === 'ETIMEDOUT') {
          throw new Error('Timeout na comunica√ß√£o com a API de automa√ß√£o');
        }
      }
      throw error;
    }
  }

  /**
   * Verifica o status da automa√ß√£o
   */
  async checkAutomationStatus(visitorId: string): Promise<HikCentralAutomationResponse> {
    try {
      const response = await axios.get(
        `${this.automationApiUrl}/api/hikcentral/status/${visitorId}`,
        {
          timeout: 30000,
          headers: {
            'Authorization': `Bearer ${process.env.HIKCENTRAL_AUTOMATION_API_KEY || 'default-key'}`
          }
        }
      );

      return response.data;
    } catch (error) {
      logger.error(`‚ùå Erro ao verificar status da automa√ß√£o: ${error}`);
      throw error;
    }
  }

  /**
   * Cancela uma automa√ß√£o em andamento
   */
  async cancelAutomation(visitorId: string): Promise<boolean> {
    try {
      const response = await axios.delete(
        `${this.automationApiUrl}/api/hikcentral/automation/${visitorId}`,
        {
          timeout: 30000,
          headers: {
            'Authorization': `Bearer ${process.env.HIKCENTRAL_AUTOMATION_API_KEY || 'default-key'}`
          }
        }
      );

      return response.status === 200;
    } catch (error) {
      logger.error(`‚ùå Erro ao cancelar automa√ß√£o: ${error}`);
      return false;
    }
  }

  /**
   * Verifica se a API de automa√ß√£o est√° dispon√≠vel
   */
  async checkAutomationAPIHealth(): Promise<boolean> {
    try {
      const response = await axios.get(
        `${this.automationApiUrl}/api/health`,
        { timeout: 10000 }
      );
      return response.status === 200;
    } catch (error) {
      logger.warn(`‚ö†Ô∏è API de automa√ß√£o n√£o est√° dispon√≠vel: ${error}`);
      return false;
    }
  }

  /**
   * Delay para retry
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

export const hikvisionAutomationService = new HikvisionAutomationService(); 