import { useState, useEffect } from 'react';
import { toast } from 'sonner';

interface NotificationState {
  permission: NotificationPermission;
  isSupported: boolean;
  subscription: PushSubscription | null;
  isSubscribed: boolean;
}

interface UseNotificationsReturn extends NotificationState {
  requestPermission: () => Promise<boolean>;
  subscribe: () => Promise<boolean>;
  unsubscribe: () => Promise<boolean>;
  sendTestNotification: () => void;
  hasLocalNotifications: boolean;
}

export function useNotifications(): UseNotificationsReturn {
  const [state, setState] = useState<NotificationState>({
    permission: 'default',
    isSupported: false,
    subscription: null,
    isSubscribed: false
  });

  useEffect(() => {
    checkNotificationSupport();
    checkExistingSubscription();
  }, []);

  const checkNotificationSupport = () => {
    const isSupported = 'Notification' in window && 'serviceWorker' in navigator && 'PushManager' in window;
    
    setState(prev => ({
      ...prev,
      isSupported,
      permission: isSupported ? Notification.permission : 'denied'
    }));

    console.log('üîî Suporte a notifica√ß√µes:', {
      isSupported,
      permission: isSupported ? Notification.permission : 'denied'
    });
  };

  const checkExistingSubscription = async () => {
    if (!('serviceWorker' in navigator)) return;

    try {
      const registration = await navigator.serviceWorker.ready;
      const subscription = await registration.pushManager.getSubscription();
      
      setState(prev => ({
        ...prev,
        subscription,
        isSubscribed: !!subscription
      }));

      console.log('üì± Subscription existente:', !!subscription);
    } catch (error) {
      console.error('‚ùå Erro ao verificar subscription:', error);
    }
  };

  const requestPermission = async (): Promise<boolean> => {
    if (!state.isSupported) {
      toast.error('Notifica√ß√µes n√£o s√£o suportadas neste navegador');
      return false;
    }

    try {
      const permission = await Notification.requestPermission();
      
      setState(prev => ({
        ...prev,
        permission
      }));

      if (permission === 'granted') {
        toast.success('‚úÖ Permiss√£o para notifica√ß√µes concedida!');
        console.log('‚úÖ Permiss√£o para notifica√ß√µes concedida');
        return true;
      } else {
        toast.warning('‚ö†Ô∏è Permiss√£o para notifica√ß√µes negada');
        console.log('‚ùå Permiss√£o para notifica√ß√µes negada');
        return false;
      }
    } catch (error) {
      console.error('‚ùå Erro ao solicitar permiss√£o:', error);
      toast.error('Erro ao solicitar permiss√£o para notifica√ß√µes');
      return false;
    }
  };

  const subscribe = async (): Promise<boolean> => {
    if (!state.isSupported || state.permission !== 'granted') {
      console.log('‚ùå N√£o √© poss√≠vel se inscrever: suporte ou permiss√£o');
      return false;
    }

    try {
      const registration = await navigator.serviceWorker.ready;
      
      // üîî TENTAR V√ÅRIAS ESTRAT√âGIAS DE SUBSCRIPTION
      let subscription = null;
      
      try {
        // Estrat√©gia 1: Sem applicationServerKey (usando gcm_sender_id)
        console.log('üîÑ Tentando subscription sem VAPID key...');
        subscription = await registration.pushManager.subscribe({
          userVisibleOnly: true
        });
        console.log('‚úÖ Subscription sem VAPID funcionou!');
      } catch (error1) {
        console.log('‚ùå Falha sem VAPID:', error1.message);
        
        try {
          // Estrat√©gia 2: Com VAPID key p√∫blico padr√£o (Firebase)
          console.log('üîÑ Tentando com VAPID key padr√£o...');
          const vapidKey = 'BEl62iUYgUivxIkv69yViEuiBIa40HI0DLKzdHPNGkzOZS3rOw9i8uFxgOoKrOhXN5SXWU9P8W8HUwmyI9zM8R8';
          const applicationServerKey = urlBase64ToUint8Array(vapidKey);
          
          subscription = await registration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: applicationServerKey
          });
          console.log('‚úÖ Subscription com VAPID funcionou!');
        } catch (error2) {
          console.log('‚ùå Falha com VAPID:', error2.message);
          throw new Error(`Push service n√£o dispon√≠vel: ${error2.message}`);
        }
      }

      setState(prev => ({
        ...prev,
        subscription,
        isSubscribed: true
      }));

      console.log('‚úÖ Inscrito em push notifications:', subscription);
      toast.success('üîî Notifica√ß√µes push ativadas!\nüí° Fallback: notifica√ß√µes locais tamb√©m funcionam');
      
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao se inscrever:', error);
      
      // üîÑ FALLBACK: Ativar apenas notifica√ß√µes locais
      if (state.permission === 'granted') {
        setState(prev => ({
          ...prev,
          isSubscribed: false, // Push falhou, mas notifica√ß√µes locais funcionam
          subscription: null
        }));
        
        toast.success('üîî Notifica√ß√µes locais ativadas!\nüí° Push notifications n√£o dispon√≠veis, mas voc√™ receber√° alertas visuais e sonoros');
        return true; // Considerar sucesso para notifica√ß√µes locais
      }
      
      toast.error('‚ùå Erro ao ativar notifica√ß√µes');
      return false;
    }
  };
  
  // Fun√ß√£o auxiliar para converter VAPID key
  const urlBase64ToUint8Array = (base64String: string) => {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding)
      .replace(/-/g, '+')
      .replace(/_/g, '/');
    
    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);
    
    for (let i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
  };

  const unsubscribe = async (): Promise<boolean> => {
    if (!state.subscription) {
      return false;
    }

    try {
      await state.subscription.unsubscribe();
      
      setState(prev => ({
        ...prev,
        subscription: null,
        isSubscribed: false
      }));

      console.log('‚úÖ Desinscrito de push notifications');
      toast.success('üîï Notifica√ß√µes desativadas');
      
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao desinscrever:', error);
      toast.error('Erro ao desativar notifica√ß√µes');
      return false;
    }
  };

  const sendTestNotification = () => {
    if (state.permission !== 'granted') {
      toast.warning('Permiss√£o para notifica√ß√µes necess√°ria');
      return;
    }

    // üîä ENVIAR NOTIFICA√á√ÉO DE TESTE COM SOM
    if ('Notification' in window) {
      new Notification('Gran Royalle - Teste', {
        body: 'Esta √© uma notifica√ß√£o de teste do sistema!',
        icon: '/pwa-icon-192.png',
        badge: '/pwa-icon-192.png',
        tag: 'test-notification',
        requireInteraction: true,
        silent: false, // üîä GARANTIR SOM
        vibrate: [200, 100, 200] // üì® VIBRA√á√ÉO
      });

      // üîä REPRODUZIR SOM DE TESTE
      try {
        const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(600, audioContext.currentTime);
        gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.2);
        
        console.log('üîä Som de teste reproduzido');
      } catch (error) {
        console.log('üîä √Åudio n√£o dispon√≠vel');
      }

      toast.success('üì® Notifica√ß√£o de teste enviada com som!');
    }
  };

  return {
    ...state,
    requestPermission,
    subscribe,
    unsubscribe,
    sendTestNotification,
    hasLocalNotifications: state.permission === 'granted' // Sempre true se tem permiss√£o
  };
}
