import { useState, useEffect } from 'react';
import { toast } from 'sonner';

interface NotificationState {
  permission: NotificationPermission;
  isSupported: boolean;
  subscription: PushSubscription | null;
  isSubscribed: boolean;
}

interface UseNotificationsReturn extends NotificationState {
  requestPermission: () => Promise<boolean>;
  subscribe: () => Promise<boolean>;
  unsubscribe: () => Promise<boolean>;
  sendTestNotification: () => void;
}

export function useNotifications(): UseNotificationsReturn {
  const [state, setState] = useState<NotificationState>({
    permission: 'default',
    isSupported: false,
    subscription: null,
    isSubscribed: false
  });

  useEffect(() => {
    checkNotificationSupport();
    checkExistingSubscription();
  }, []);

  const checkNotificationSupport = () => {
    const isSupported = 'Notification' in window && 'serviceWorker' in navigator && 'PushManager' in window;
    
    setState(prev => ({
      ...prev,
      isSupported,
      permission: isSupported ? Notification.permission : 'denied'
    }));

    console.log('üîî Suporte a notifica√ß√µes:', {
      isSupported,
      permission: isSupported ? Notification.permission : 'denied'
    });
  };

  const checkExistingSubscription = async () => {
    if (!('serviceWorker' in navigator)) return;

    try {
      const registration = await navigator.serviceWorker.ready;
      const subscription = await registration.pushManager.getSubscription();
      
      setState(prev => ({
        ...prev,
        subscription,
        isSubscribed: !!subscription
      }));

      console.log('üì± Subscription existente:', !!subscription);
    } catch (error) {
      console.error('‚ùå Erro ao verificar subscription:', error);
    }
  };

  const requestPermission = async (): Promise<boolean> => {
    if (!state.isSupported) {
      toast.error('Notifica√ß√µes n√£o s√£o suportadas neste navegador');
      return false;
    }

    try {
      const permission = await Notification.requestPermission();
      
      setState(prev => ({
        ...prev,
        permission
      }));

      if (permission === 'granted') {
        toast.success('‚úÖ Permiss√£o para notifica√ß√µes concedida!');
        console.log('‚úÖ Permiss√£o para notifica√ß√µes concedida');
        return true;
      } else {
        toast.warning('‚ö†Ô∏è Permiss√£o para notifica√ß√µes negada');
        console.log('‚ùå Permiss√£o para notifica√ß√µes negada');
        return false;
      }
    } catch (error) {
      console.error('‚ùå Erro ao solicitar permiss√£o:', error);
      toast.error('Erro ao solicitar permiss√£o para notifica√ß√µes');
      return false;
    }
  };

  const subscribe = async (): Promise<boolean> => {
    if (!state.isSupported || state.permission !== 'granted') {
      console.log('‚ùå N√£o √© poss√≠vel se inscrever: suporte ou permiss√£o');
      return false;
    }

    try {
      const registration = await navigator.serviceWorker.ready;
      
      // VAPID key ser√° configurada depois (por enquanto null)
      const subscription = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: null // Ser√° configurado depois com VAPID key
      });

      setState(prev => ({
        ...prev,
        subscription,
        isSubscribed: true
      }));

      console.log('‚úÖ Inscrito em push notifications:', subscription);
      toast.success('üîî Notifica√ß√µes ativadas!');
      
      // Aqui poderia enviar subscription para o servidor
      // await sendSubscriptionToServer(subscription);
      
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao se inscrever:', error);
      toast.error('Erro ao ativar notifica√ß√µes');
      return false;
    }
  };

  const unsubscribe = async (): Promise<boolean> => {
    if (!state.subscription) {
      return false;
    }

    try {
      await state.subscription.unsubscribe();
      
      setState(prev => ({
        ...prev,
        subscription: null,
        isSubscribed: false
      }));

      console.log('‚úÖ Desinscrito de push notifications');
      toast.success('üîï Notifica√ß√µes desativadas');
      
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao desinscrever:', error);
      toast.error('Erro ao desativar notifica√ß√µes');
      return false;
    }
  };

  const sendTestNotification = () => {
    if (state.permission !== 'granted') {
      toast.warning('Permiss√£o para notifica√ß√µes necess√°ria');
      return;
    }

    // Enviar notifica√ß√£o local para teste
    if ('Notification' in window) {
      new Notification('Gran Royalle - Teste', {
        body: 'Esta √© uma notifica√ß√£o de teste do sistema!',
        icon: '/pwa-icon-192.png',
        badge: '/pwa-icon-192.png',
        tag: 'test-notification'
      });

      toast.success('üì® Notifica√ß√£o de teste enviada!');
    }
  };

  return {
    ...state,
    requestPermission,
    subscribe,
    unsubscribe,
    sendTestNotification
  };
}
