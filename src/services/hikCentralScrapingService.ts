/**
 * ü§ñ HIK CENTRAL SCRAPING SERVICE - NOVA VERS√ÉO
 * =============================================
 * Integra√ß√£o com o novo sistema de automa√ß√£o
 */

import automationService, { VisitorAutomationData } from './automationService';
import { logger } from '@/utils/secureLogger';

export class HikCentralScrapingService {
  private logs: string[] = [];

  private log(message: string) {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}`;
    this.logs.push(logMessage);
    console.log(logMessage);
  }

  getLogs(): string[] {
    return [...this.logs];
  }

  clearLogs() {
    this.logs = [];
  }

  async testConnection(): Promise<boolean> {
    this.log('üîó Testando conex√£o com servidor de automa√ß√£o...');
    
    try {
      const isHealthy = await automationService.checkHealth();
      
      if (isHealthy) {
        this.log('‚úÖ Servidor de automa√ß√£o est√° funcionando!');
        return true;
      } else {
        this.log('‚ùå Servidor de automa√ß√£o n√£o est√° respondendo');
        return false;
      }
    } catch (error) {
      this.log(`‚ùå Erro ao testar conex√£o: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
      return false;
    }
  }

  async createVisitorViaScraping(visitorData: {
    name: string;
    cpf: string;
    phoneNumber: string;
    email: string;
    morador: string;
    photoUrl?: string;
    photo_base64?: string; // Nova propriedade para foto em base64
  }): Promise<string> {
    this.log('ü§ñ Iniciando cria√ß√£o de visitante via Nova Automa√ß√£o...');
    this.log(`üë§ Visitante: ${visitorData.name}`);

    try {
      // Verificar se servidor est√° funcionando
      const isHealthy = await automationService.checkHealth();
      if (!isHealthy) {
        throw new Error('Servidor de automa√ß√£o n√£o est√° dispon√≠vel');
      }

      // Gerar ID √∫nico para o visitante
      const visitorId = automationService.generateVisitorId(
        visitorData.name,
        visitorData.cpf
      );

      this.log(`üÜî ID gerado: ${visitorId}`);

      // Preparar dados para nova automa√ß√£o
      const automationData: VisitorAutomationData = {
        name: visitorData.name,
        cpf: visitorData.cpf,
        phone: visitorData.phoneNumber,
        email: visitorData.email,
        rg: visitorData.cpf?.substring(0, 8) || '', // Usar CPF como RG se n√£o fornecido
        placa: '', // Pode ser preenchido posteriormente
        photo_base64: visitorData.photo_base64 // Foto em base64
      };

      this.log('üöÄ Iniciando automa√ß√£o no servidor...');

      // Iniciar automa√ß√£o
      const automationResult = await automationService.startAutomation(
        visitorId,
        automationData
      );

      if (!automationResult.success) {
        throw new Error(automationResult.error || 'Falha na automa√ß√£o');
      }

      this.log('‚úÖ Automa√ß√£o iniciada com sucesso!');
      
      if (automationResult.photo_received) {
        this.log('üì∏ Foto recebida e processada pelo servidor');
      }

      this.log('‚è≥ Monitorando progresso da automa√ß√£o...');

      // Monitorar progresso da automa√ß√£o
      const finalStatus = await automationService.monitorAutomation(
        visitorId,
        (status) => {
          const currentStatus = status.status.status;
          
          switch (currentStatus) {
            case 'pending':
              this.log('‚è≥ Aguardando na fila de processamento...');
              break;
            case 'processing':
              this.log('ü§ñ Executando automa√ß√£o no HikCentral...');
              break;
            case 'completed':
              this.log('‚úÖ Automa√ß√£o conclu√≠da com sucesso!');
              break;
            case 'failed':
              this.log('‚ùå Falha na automa√ß√£o');
              break;
          }
        },
        180000 // 3 minutos timeout
      );

      // Verificar resultado final
      if (finalStatus?.status.status === 'completed') {
        this.log('üéâ Visitante cadastrado com sucesso no HikCentral!');
        this.log(`üÜî ID final: ${visitorId}`);
        
        if (automationData.photo_base64) {
          this.log('üì∏ Foto do rosto registrada para reconhecimento facial!');
        }
        
        return visitorId;
        
      } else if (finalStatus?.status.status === 'failed') {
        const errorMsg = finalStatus.status.error_message || 'Erro desconhecido na automa√ß√£o';
        this.log(`‚ùå Automa√ß√£o falhou: ${errorMsg}`);
        throw new Error(`Falha na automa√ß√£o: ${errorMsg}`);
        
      } else {
        this.log('‚è∞ Timeout na automa√ß√£o - processo pode estar em andamento');
        // Retornar ID mesmo com timeout, pois pode completar depois
        return visitorId;
      }

    } catch (error) {
      this.log(`‚ùå Erro ao criar visitante: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
      throw error;
    }
  }

  async discoverPageStructure(): Promise<any> {
    this.log('üîç Obtendo estat√≠sticas do servidor de automa√ß√£o...');
    
    try {
      const stats = await automationService.getStats();
      
      if (stats) {
        this.log('üìä Estat√≠sticas obtidas com sucesso');
        return {
          success: true,
          server_stats: stats,
          message: 'Servidor de automa√ß√£o funcionando'
        };
      } else {
        this.log('‚ö†Ô∏è N√£o foi poss√≠vel obter estat√≠sticas');
        return {
          success: false,
          message: 'Servidor n√£o est√° respondendo √†s estat√≠sticas'
        };
      }
      
    } catch (error) {
      this.log(`‚ùå Erro ao obter estrutura: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * M√©todo para listar automa√ß√µes em andamento
   */
  async getActiveAutomations(): Promise<any> {
    this.log('üìã Obtendo automa√ß√µes ativas...');
    
    try {
      const stats = await automationService.getStats();
      
      if (stats && stats.stats) {
        const activeInfo = {
          queue_size: stats.stats.queue_size || 0,
          active_automations: stats.stats.active_automations || 0,
          active_list: stats.stats.active_list || [],
          max_workers: stats.stats.max_workers || 3
        };
        
        this.log(`üìä Automa√ß√µes ativas: ${activeInfo.active_automations}/${activeInfo.max_workers} workers`);
        this.log(`üìã Na fila: ${activeInfo.queue_size}`);
        
        return activeInfo;
      }
      
      return { active_automations: 0, queue_size: 0 };
      
    } catch (error) {
      this.log(`‚ùå Erro ao obter automa√ß√µes ativas: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
      return { active_automations: 0, queue_size: 0 };
    }
  }

  /**
   * M√©todo para verificar status de uma automa√ß√£o espec√≠fica
   */
  async checkAutomationStatus(visitorId: string): Promise<any> {
    this.log(`üîç Verificando status da automa√ß√£o: ${visitorId}`);
    
    try {
      const status = await automationService.getAutomationStatus(visitorId);
      
      if (status) {
        this.log(`üìä Status: ${status.status.status}`);
        return status;
      } else {
        this.log('‚ùì Automa√ß√£o n√£o encontrada');
        return null;
      }
      
    } catch (error) {
      this.log(`‚ùå Erro ao verificar status: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
      return null;
    }
  }
}

// Exportar inst√¢ncia singleton
export const hikCentralScrapingService = new HikCentralScrapingService();

export default hikCentralScrapingService; 